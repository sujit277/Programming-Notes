   What do you mean by Collection FrameWork?
-> Java collections framework gives the programmer access to prepackaged data structures as 
   well as to algorithms for manipulating them.

   Note --
   Collection is an object that holds the references to another objects

   The Collection Interface (java.util.collection) and Map Interface (java.util.map) are the 
   main root interfaces of Java Collection Classes.   

   There are two types of Collection 
   1.Generic Collection -
   A Generic collection is strongly typed where we can hold elements of same datatype so that 
   we can eliminate runtime type mismatches.
   2.Non Generic Collection -
   Non-generic collections hold elements of different datatypes.

   Hierarchy of Collection FrameWork
   -----------------------------------
   
   Interfaces are Denoted as i
   Classes are Denoted as c

   Iterable(i) --> Collection(i) --> (List(i), Queue(i), Set(i))
   List(i) --> (ArrayList(c), LinkedList(c), Vector(c) --> Stack(c))
   Queue --> (Deque(i) --> ArrayDeque(c), PriortyQueue(c))
   Set --> (HashSet(c), LinkedHashSet(c), SortedSet(i) --> TreeSet(c))

   Note--
   There are some Interfaces which we use for Iterating over elements
   Iterator Interface, ListIterator Interface, Enumeration Interface

   There are some Interfaces which we use for Sorting elements
   Comparable Interface, Comperator Interface

   There is one Interface that we use for storing key value pairs Data values
   Map Interface --> (HashMap class and LinkedHashMap class) and ShortedMap Interface --> TreeMap class)

   List Interface - 
   List Interface is the child Interface of collection interface.List type data structure
   can store ordered Collection of elements.It can have duplicate values.
   List Interface is Implemented by the ArrayList, LinkedList, Vector, Stack Classes

   ArrayList <data type> list1 = new ArrayList<data type>();
   LinkedList <data type> list2 = new LinkedList<data type>();
   Vector <data type> list3 = new Vector<data type>();
   Stack <data type> list4 = new Stack<data type>();

   Queue Interface -
   Queue Interface is the child interface of collection interface.Queue type data structure
   can store ordered list.it follows first-in-first-out order.
   Queue Interface is Implemented by ArrayDeque and PriortyQueue Classes 

   Queue <data type> q1 = new PriortyQueue<data type>();
   Queue <data type> q2 = new ArrayDeque<data type>();

   Set Interface - 
   Set Interface is the child interface of collection interface.set type data structure can 
   can store only unique values.It does not make ordered collection of elements.
   Set Interface is Implemented by HashSet, LinkedHashSet and TreeSet Classes.

   Set <data type> s1 = new HashSet<data type>();
   Set <data type> s2 = new LinkedHashSet<data type>();
   Set <data type> s3 = new TreeSet<data type>();
 
   Methods of Collection Interfaces
   --------------------------------

   1. add(Object)  -- This method is used to add an object to the Collection.
   2. addAll(Collection c) -- This method adds all the elements in the given collection to 
      this Collection.
   3. clear -- This method removes all the elements from this collection.
   4. contains(Object o) -- This method returns true if the collection contains the specified
      element.
   5. containsAll(Collection c) -- This method returns true if the collection contains all of 
      the element in the given collection.
   6. equals(Object o) -- This method compares the specified object with this collection
      for eqaulity. 
   7. max() -- This method is used to return the maximum value present in the collection.
   8. isEmpty() -- This method returns true if the collection contains no element.
   9. size() -- This method is used to return the number of elements in the collection.
   10.remove(Object o) -- This method is used to remove the given object from this collection.
      if there are duplicate values, then it will remove the first occurence of the object.
   11.removeAll(Collection c) -- This method is used to remove all the objects in the given 
      Collection from this Collection.
   12.iterator() -- This method returns an iterator over the elements in the Collection.
   13.toArray() -- This method is used to return an array containing all of the elements in 
      this collection.
   14.retainAll(Collection c) -- This Method is used to retain only those elements in this 
      collection that are contained in the specified  collection.     


    1. ArrayList -->

    ArrayList is the Implementing class of List Interface. It has the capability to 
    store similar or disimilar kind of data.ArrayList can increase its size dynamically,
    we can intialise ArrayList using new keyword.

    Difference between Array and ArrayList
               Array                  |            ArrayList
      1. It has the capability to         1. It has the capability to store 
         store only similar type             similar or disimilar kind of 
         of data.                            data.
      2. Array cannot increase its size   2. ArrayList can increase its size  
         dynamically.                        dynamically.   
      3.It can be intialised without new  3.It can only get intialised using 
        keyword also.                       new keyword.


        // Java program to demonstrate the working of ArrayList
           import java.io.*;
           import java.util.*;

           class GFG {
	        public static void main(String[] args)
	       {
		      ArrayList<Integer> al = new ArrayList<Integer>();
		      for (int i = 1; i <= 5; i++)
			    al.add(i);
		      System.out.println(al);
		      al.remove(3);
		      System.out.println(al);
		      for (int i = 0; i < al.size(); i++)
			   System.out.print(al.get(i) + " ");
	     }
      }

      Different Constructors of ArrayList
      -----------------------------------
      ArrayList() - Constructs an empty list with initial capacity of ten.
      ArrayList(int initialCapacity) - Constructs an empty list with the specified intial
      capacity.
      ArrayList(Collection c ) - Creates a list containing specified elements of the collection.

      Iterator --
      Iterator Interface can only Traverse elements in the Forward direction.
      Iterator method is available for all collection Interface Implementing class like
      List, Set, Queue.

      Some Important Methods of Iterator Interface
      --------------------------------------------
      1.hasNext() - hasNext() method of Iterator interface checks wheather list has further
        upcoming elements or not and based on that it returns true or false.
      2.next() - next() method basically return next element.

      ListIterator --
      ListIterator is the child Interface of Iterator Interface.
      It has all features of Iterator Interface and has some adding features like traversing
      elements in the backward direction.
      ListIterator method is available for List Interface Implementing Classes only.
      we can also add and set elements using ListIterator Whereas Incase of Iterator we can't.
      
      Some Important Methods of ListIterator Interface
      --------------------------------------------
      1.hasPrevious() - hasPrevious() method of ListIterator interface checks wheather list has 
        previous elements or not and based on that it returns true or false.
      2.previous() - previous() method basically return current element and moves pointer to previous 
        element.


      Note --
      What do you mean by Reference Id ?
      --> Reference Id is the memory location which contains the memory location of the object
      It is generated by new keyword.
      Why we do not get Reference Id when we print references of ArrayList?
      --> we do not get Reference Id when we print ArrayList references because ArrayList has 
      overrddien toString method of Object class in its own way.

      In Order to overcome this we can override toString method in our class in our own way.

      What do you mean by Lamda Expression ?
      --> A Lambda expression is a short block of code which takes in parameters and returns a
      value. Lambda expressions are similar to methods, but they do not need a name and they 
      can be implemented right in the body of a method.
      Lambda expressions are usually passed as parameters to a function.


      import java.util.ArrayList;

      public class Lambda {
	   public static void main(String args[]) {
		   ArrayList<Integer> arrnum = new ArrayList<Integer>();
		   arrnum.add(1);
		   arrnum.add(2);
		   arrnum.add(3);
		   arrnum.add(4);
		   arrnum.add(5);
		   arrnum.forEach((n) -> {System.out.println(n);});
	      }
      }



      2. Stack -->
    
      Stack is a concrete class which Implements List Interface.
      Stack data structure follows LIFO Principle i.e Last in First out.
      Stack data structure provides the Implementation of List Interface.
      It has  more methods such as empty, peek, search other than collection framework
      methods. 

      Different Constructors of Stack --
      Stack() -  Creates an Empty Stack.

      1.peek() - It returns top element of the stack;
      2.empty() - It is used check whether stack is empty or not based on that it returns
        true or false.
      3.search() - It is used to search for an element in the stack and get its distance from
      the top.  

      3. LinkedList --> 

      LinkedList is a concrete class which Implements List Interface.
      LinkedList is a linear data structure where elements are not stored in a contiguous 
      memory location.
      LinkedList is consisting of various nodes and each node is consisting of data and the 
      address part and the elements are connected using pointer and the address part.

      Note --
      LinkedList can store elements of different datatypes until unless it is strictly 
      typed with the datatype.

      Different Constructors of LinkedList --

      1.LinkedList() - Constructs an empty LinkedList.
      2.LinkedList(Collection c) - Constructs a LinkedList containing elements of the specified
        Collection.

      Difference between ArrayList and LinkedList

                  ArrayList                   |               LinkedList
         1.ArrayList internally uses a dynamic     1.LinkedList internally uses a doubly 
           array to store the elements.              linked list to store the elements.

         2.ArrayList is better for storing and     2.LinkedList is better for manipulating 
           accessing data.                           data.

         3.Here Memory location for ArrayList      3.Here Memory location for LinkedList
           elements is Contigious.                   elements is not Contigious.

         4.It acts as a List.                      4.It acts as a List and Queue.
           

      4. Vector -->
    
      Vector is a Concrete class Implementing List Interface.
      Vector Provides us Dynamic Array in Java.
      The Primary Difference between ArrayList and Vector is Vector is Synchronised 
      whereas ArrayList is Non Synchronised.
      Vector is Helpful in Program where lot of Manipulation in the array is needed.
      It is thread safe because Vector is Synchronised.

      Different Constructors of Vector --
      --------------------------------

      1.Vector() - Constructs an empty Vector with intial capacity of 10.
      2.Vector(Collection c) - Constructs a vector containing elements of the specified 
        Collection.
      3.Vector(int initialCapacity) - Constructs an Empty Vector with the specified intial
      capacity.
      4.Vector(int initialCapacity,int capacityincrement) - Constructs an Empty Vector with
        the specified intial capability and capacity increment.

      Difference between ArrayList and Vector
      ---------------------------------------

                  ArrayList                |                  Vector
         1.ArrayList is Non Synchronised.             1.Vector is Synchronised.  

         2.ArrayList is not a legacy Collection.      2.Vector is legacy Collection.

         3.ArrayList is Fast because it is Non        3.Vector  is Slow because it is
           Synchronised.                                Synchronised.

         4.ArrayList Uses Iterator interface to       4.Vector Uses Iterator and Enumeration 
           Traverse the elements.                       Interface to Traverse elements.

         5.ArrayList increments 50% of current        5.Vector increments 100% of current
           array size if capacity exceeds.              Vector size if capacity exceeds.


      5. HashSet -->
      
      HashSet is a concrete class which provides the Implementation of the Set Interface.
      Here the Objects that we insert into the HashSet do not guarentee to be inserted in 
      the same order.The Objects are Inserted based on their HashCode.This class also 
      allows insertion of null elements.
      It Provides the Implementation of HashTable(HashMap Instance) Data Structure.
      HashTable stores the data in the key value Pairs.

      Different Constructors of HashSet --
      ----------------------------------

      1.HashSet() - Constructs a new empty Set, the Backing HashMap Instance has Default 
      intial capacity (16) and load factor (0.75).
      2.HashSet(Collection c ) - Constructs a new Set containing the elements in the specified
        collections.
      3.HashSet(int initialCapacity) - Constructs an new Empty Set.the backing HashMap has 
        the specified intial capacity and Default factor (0.75).  
      4.HashSet(int initialCapacity,float loadFactor) - Constructs a new Empty Set. the backing
        HashMap Instance has the intial capacity and the specified load factor.   


      6. LinkedHashSet -->
      
      LinkedHashSet is a Concrete class Implementing Set Interface. It is Similar to HashSet.
      The Only Difference is that it uses Doubly LinkedList to store data and retains the
      ordering of the elements.  

      Different Constructors of LinkedHashSet --
      -----------------------------------------

      1.LinkedHashSet() - Creates an Empty LinkedHashSet intial capacity 16 and Loadfactor 
        0.75.
      2.LinkedHashSet(Collection c) - Constructs a new LinkedHashSet Containing the elements
        of the specified collections. 
      3.LinkedHashSet(int initialCapacity) - Constructs a new LinkedHashSet with the specified
        Initial Capacity and Loadfactor 0.75.
      4.LinkedHashSet(int initialCapacity,int loadFactor) - Constructs a LinkedHashSet with
        the specified Initial Capacity and specified Loadfactor.  


      7. SortedSet Interface -->
      
      SortedSet Interface is the child Interface of Set Interface.It is similar to Set
      Interface.The only difference is that this interface has extra methods that maintains
      the ordering of elements.
      This Interface is used to handle data which needs to be Sorted.

      SortedSet<data type> ts = new TreeSet<data type>();


      8. TreeSet -->
      
      TreeSet is a concrete class which provides the Implementation of SortedSet Interface.
      It Provides the Elements in the sorted order.

      Different Constructors of TreetSet --
      -----------------------------------

      1.TreeSet() - Constructs a new empty Tree Set, Sort elemenets According to natural 
        ordering.
      2.TreeSet(Collection c ) - Constructs a new TreeSet Containing specified elemenets of
        the collections, Sort Elements According to natural order.
      3.TreeSet(Comparator comparator) - Constructs a new Empty tree Set , Sorted According
        to the specified comparator.
      4.TreeSet(SortedSet s) - Constructs a new Tree Set Containing the same elements and
        using the same ordering as the specified sorted Set.   

      Note--
      Any Userdefined object we create it can't be inserted into TreeSet Until Unless it 
      Implements Comperable Interface    
      TreeSet Uses Comparable interface to Compare Values which Every wrapper class 
      Implements. 
      TreeSet can use Only One wrapper class Comparable at a time.


      9. PriortyQueue  -->
       
       PriortyQueue is a concrete class which Implements Queue Interface.
       In PriortyQueue Objects are supposed to be Processed based on Priorty.

       Different Constructors of Priorty Queue -
       ----------------------------------------

       1. PriortyQueue() - Constructs an Empty PriortyQueue with default Initial Capacity of
         11 elements and orders elements According to their natural ordering.
       2. PriortyQueue(Collection c) - Constructs a PriortyQueue with the specified collection
          elements.
       3. PriortyQueue(int initialCapacity) - Constructs a new empty PriortyQueue with
          the specified initial Capacity and orders elements According to their natural
          ordering.
       4. PriortyQueue(int initialCapacity,Comparator comparator) - Constructs a new PriortyQueue
          with the specified intial Capacity and orders its Elements According to the 
          specified Comparator.   


      10. Deque Interface -->

      It is the child Interface of Queue Interface.
      It Provides us the Implementation of DeQueue Data Structure.It is also Known ad 
      Ended Queue.
      In this Data Structure we can add and remove elements from both the sides of the Queue.
      ArrayDeque class Implements Deque Interface.


      11. ArrayDeque -->

      ArrayDeque is a concrete class which Implements DeQueue Interface ( Which is the child
      interface of Queue Interface).It Provides us a way of Resizable Array.
      It is a Special type of Array that grows and allows users to add or remove elements 
      from both the sides.ArrayDeque has no Capacity Restrictions.

      Different Constructors of Array Deque --
      --------------------------------------

      1.ArrayDeque() -  Constructs an empty ArrayDeque and holds an intial Capacity of 16
        Elements.
      2.ArrayDeque(Collection c ) - Constructs a new ArrayDeque with the specified Collection
        Elements.
      3.ArrayDeque(int initialCapacity) - Constructs a new ArrayDeque with the specified 
        intial Capacity.  


      12. Map Interface -->

       A Map is a Data Structure that supports Key-Value pairs mapping for the data.
       This Interface does not supports duplicate keys because the same key cannot have 
       multiple mappings.
       A Map is useful if we want to perform operations on the data on the basis of Key.
       Classes like HashMap and TreeMap Implements Map Interface.

       Map <datatype> hm = new HashMap<datatype>();


      13.HashMap -->

      HashMap is a Concrete class which Provides the Implementation of Map Interface.
      It Stores the Data in the key value Pairs.To Access Value in a HashMap we should
      know its Key.Hash Map uses a technique called Hashing.
      Hashing is a Technique of converting Larger String into Smaller String that represents 
      the same string so that Indexing and Search operations are faster.
      HashSet Internally Uses HashMap.

      Some Methods of HashMaps
      ------------------------

      1. hm.entrySet() - It is used to Retreive all the key-value pairs called Map.Entry.
      2. hm.entrySet().iterator() - returns an iterator that acts as a cursor and points 
      at the first element of the set and moves till the end.
      3. hmIterator.hasNext() - checks for the next element in the set and returns a 
         boolean.
      4. hmIterator.next() - returns the next element from the set.
      5. mapElement.getKey() - returns the key of the associated Map.Entry.
      6. mapElement.getValue() - returns the value of the associated Map.Entry.

      





  