Memory Space -
1. For Instance Variables and Objects memory is allocated in the heap memory.
2. For Static Variables memory is allocated in heap memory.
3. For Local Data Members are allocated in the stack memory. 

Varibales -> Variables are reserved memory location to store some value
Types of Variables in Java--

1. Instance variables - Instance variables are non-static variables and are declared in a 
   class outside any method, constructor, or block. As instance variables are declared
   in a class, these variables are created when an object of the class is created and
   destroyed when the object is destroyed.

2. Static Variables / Class Variables - Static variable in Java is variable which belongs
   to the class and initialized only once at the start of the execution. It is a variable
   which belongs to the class and not to object(instance ),for static variables memory is
   allocated only once.
   Note--
   Static variables are only allowed at the class level not inside method level.

3. Local Variables - A local variable is a variable declared inside a method body, block
   or constructor. It means variable is only accessible inside the method, block or 
   constructor that declared it.
---------------------------------------------------------------------------------------------
Modifiers are keywords which are used to modify the default properties of the Builtin 
Data Types.
->There are two types of Modifiers in java
1. Access Modifiers
2. Non Access Modifiers

Access Modifiers - The access modifiers in Java specifies the accessibility or scope of a
                   field, method, constructor, or class. 
Types of Access Modifiers in Java
1. Public - it is available to everywhere ( In the package or outside the package ).
2. Protected - it is available in the same package and subclass of other package.
3. Private - it is only avaiable in the same class.
Note -
      Private Variables are inherited to child class but not accessible to child class

4. Default - it is avaiable in the same package.
---------------------------------------------------------------------------------------------
Non Access Modifiers - They are used with classes, methods, variables, constructors etc 
                       to provide information about their behavior to JVM.

Final - Variables/Methods/Class

-->The final keyword in java is used to restrict the user. The java final keyword can be 
   used in many context. Final can be:-
1. Variable - If you make any variable as final, you cannot change the value of final 
              variable(It will be constant). 

class Bike9{  
 final int speedlimit=90;//final variable  
 void run(){  
  speedlimit=400;  
 }  
 public static void main(String args[]){  
 Bike9 obj=new  Bike9();  
 obj.run();  
 } 
 
Output  - Compile Time Error

2. Method - If you make any method as final, you cannot override it.

class Bike{  
  final void run(){System.out.println("running");}  
}  
     
class Honda extends Bike{  
   void run(){System.out.println("running safely with 100kmph");}  
     
   public static void main(String args[]){  
   Honda honda= new Honda();  
   honda.run();  
   }  
} 

Output - Compile Time Error

3. Class - If you make any class as final, you cannot extend it.

final class Bike{}  
  
class Honda1 extends Bike{  
  void run(){System.out.println("running safely with 100kmph");}  
    
  public static void main(String args[]){  
  Honda1 honda= new Honda1();  
  honda.run();  
  }  
}  

Output - Compile Time Error

Static - Variables/Methods/Class(Inner Class)
--> Static keyword is used for Memory Management.

The static can be:
Variable (also known as a class variable)
Method (also known as a class method) - If you apply static keyword with any method, 
                                        it is known as static method.

1. A static method belongs to the class rather than the object of a class.
2. A static method can be invoked without the need for creating an instance of a class.
3. A static method can access static data member and can change the value of it.
4. The static method can not use non static data member or call non-static method directly.
5. This and super cannot be used in static context.

class A{  
 int a=40;//non static  
   
 public static void main(String args[]){  
  System.out.println(a);  
 }  
}  

Output - Compile Time Error

Block -> It is used to initialize the static data member.
        It is executed before the main method at the time of classloading.

Nested class -> 


Abstract - Class/Methods
Synchronised- We used this for Synchronisation
Transient

----------------------------------------------------------------------------------------
Operators -

Assigment - =,+=,-=,...
Arithmetic - +,-,*,/
Relational/Comparision - <,>,==,!=,>=,<=
Logical  - &&,||,!
Bitwise - &,|,^
Conditional - ?:
Shift - >>,<<,>>>
Equals - ===

------------------------------------------------------------------------------------------
Terminologies -
Keyword -     Reserved keywords for specific purpose
Data Types -  Keyword that defines what type of data an entity can hold
Identifiers - Identifiers are names given to any entity
Literals -    Values that we assign on the right side 
Variables -   Entity which can hold value and values can be changed
Constants -   Entity Which can hold value and value can't be changed
Operators -   Special characters to peform some operation
Operands -    On which Operation is performed 


Difference between break and return 
->Break is used to exit the loop that we are currently executing while Return will exit the
entire method that rwe are currently executing and possibly return value to the caller
function.

-----------------------------------------------------------------------------------------
Control Statments - Control statments are statments that determines whether other
                    statements are executed or not .

Types of Control Statements -
1. Decision Making statements
   1. if statements
   2. switch statement
2.Loop statements - 
   1. do while loop
   2. while loop - /*we use for security purposes*/
   3. for loop
   4. for-each loop
3.Jump statements
   1. break statement
   2. continue statement


When we use for and we use while ?
->When we know the number of iterations then we use for and when we don't know the number 
of iterations then we use While.

Notes - 1. In For loop nothing is mandatory 
           for(;;) - Here it will behave like a while true condition
        2. if(1) we will not work in java because java is stricty typed true/false must 
           be there
        3. if() will triger error becz value there

--------------------------------------------------------------------------------------------
 
Valid Array Declartions -

int a[] = new int[5];
int a[];
int[] a;
        