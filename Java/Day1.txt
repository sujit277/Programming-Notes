What do you by mean by class ?
class is a blueprint or template for creating objects but it is not the collection of
objects of similar type.
---------------------------------------------------------------------------------------
Encapsulation --> Abstraction
Inheritance - Reusibility
Polymorphism - Overloading, Overriding 

---------------------------------------------------------------------------------------
super() is by default available to every constructor for super class constructor 
e.i Default constructor of the super class
super(parameters)  we can use it explicitly to call parameterized construtor of the 
parent  class 
this() we use to call the other constructor of the same class.
both this() and super() must be the first line of the constructor

class A
{
A()
{
this(3);
System.out.println("Default Constructor A");
}
A(int a)
{
System.out.println("Parameterized Constructor of A");
}
}

class B extends A
{
B()
{
super();
System.out.println("Default Constructor B");
}
B(int b)
{
this();
System.out.println("Parameterized Constructor of B");
}
B b = new B();
}

Calling all the constructor using this() and super()
---------------------------------------------------------------------------------------
Why Interface was introduced to Java ?
An Interface in java is a blueprint of a class.It has static constants and abstract 
methods.
Interface Variables are globally Available.


Interface has been been introduced to java due to following reasons-
1.To Provide rules and regulations to Classes.
2.To Provide Security of the data.
3.To Hide the implementation Logic of the methods.


interface  A
{
int x = 50;
public void show();
}
interface B 
{
int y = 10;
public void Book()
}
interface C extends A, B
{
/* Logic */
}
class D implements C
{
public void show()
{
/* Logic */
}
public void Book()
{
/* Logic */
}
}

This is an Example of Multiple Inheritance.


interface A
{
void run();
}
class B implements A
{
void run()
{
System.out.println("RUN");
}
}

Here class B implements interface A does not mean that B is inheriting all the Methods 
of interface . Here it is only providing some rules to be followed.
---------------------------------------------------------------------------------------
Points to be Remembered -
Can a Class can compile without main Method ?
-> Yes , it will compile without compile time error.
Can a Java fileName can be different than the class name of the Java file ?
-> Yes, It Can be different than the class name of the Java file . 
How many .class files will generate on compiling a Java file consisting of more than
one class ?
-> That much class files will be genrated which Java file has it.

---------------------------------------------------------------------------------------
Naming Convention for Naming class, Methods, Variables 

According to given requirement we will Names Accordingly following below Convention --

Noun (Name of a Person,state,place etc. () -> Class
Verb (Actions)  -> Method
Entity (Properties) -> Varible
 