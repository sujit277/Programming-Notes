                                    Ecamscript6
                              -----------------------

1. What do you mean by Ecmascript ?
-> Ecamscript is a javascript standard meant to ensure the standard syntax of web pages
   accross different web browsers.

2. What are the new features which where added in Ecamscript6 ?
-> These are the following features which were added in Ecmascript6
   1. Let and const keywords
   2. Arrow functions
   3. Multiline String
   4. Default Parameter
   5. Destructuring Assignment
   6. Promises
   7. Template Literals
   8. classes 

3. What do you understand by Callback and Callback hell in JavaScript?
-> Callback: It is used to handle the execution of function after the completion of the 
   execution of another function. A callback would be helpful in working with events. 
   In the callback, a function can be passed as an argument to another function. 
   It is a great way when we are dealing with basic cases such as minimal asynchronous 
   operations.

   Callback hell: When we develop a web application that includes a lot of code, then 
   working with callback is messy. This excessive Callback nesting is often referred to as 
   Callback hell.   

4.  List the comparisons between ES5 and ES6. 
->                ES5                        |                      ES6
    -----------------------------------------------------------------------------------------
    1.ES5 is the fifth edition of the          1.ES6 is the sixth edition of the ECMAScript 
      ECMAScript which was introduced            which was introduced in 2015.
      in 2009.

    2.In ES5, we could define the variables   2.In ES6, in addition to var, there are 
      by using the var keyword only.            two new keywords to define variables
                                                let and const.

    3.In ES5 we don't have the concept of     3.In ES6 Template Literals concept is 
      Template Literals.                        Introduced.

5.  What do you mean by Webpack ?
->  It is an open-source JavaScript module bundler that takes modules with dependencies. 
    It allows us to run an environment that hosts Babel.

6.  What do you mean by IIFE (Immediately invoked function expressions)?
->  IIFE is a function in JavaScript that runs as soon as it is defined. It is also called as
    the Self-Executing Anonymous Function. 
    These are the functions which are called by themselves by using () Group Operator.

7.  What do you mean by Babel ?
->  It is mainly used for converting the ES6 plus code into the backward-compatible version
    of JavaScript that can be run by previous JavaScript engines.   

8.  What are the states of Promises in ES6?   
->  Promises mainly possess three states as follows:
 
   Pending: This refers to the initial state of every promise. It indicates that the result 
   has not yet been computed.
   Fulfilled: It refers to the completion of a task.
   Rejected: It indicates the failure that arises during computation. 

9. What is the difference between for..of and for..in?
-> for in -  It Loops through the Properties of an Object.
   for of -  It Loops through the Values of an Object.

10. What are the Different Stages of Event Propagation ?
-> There are three stages of Event Propagation:

   Capturing Phase - the event begins with the window and progresses through each element 
   until it reaches the target element.
   Target Phase - The event has arrived at the target element. 
   Bubbling Phase - The event bubbles up from the target element and then Level up every element
   until it reaches the window.

11. What do you mean by Generator Function?   
->  Generator Function are Like Function with more than one return.
    Generator Functions are denoted using * sign after function keyword.
    It returns Generator Object or setup Generator Object.
    e.g -
    function* simpleGenerator(){
      yield 1
      yield 2
      yield 3
    }

    const generatorObject = simpleGenerator();
    const obj = generatorObject.next();
    console.log(obj);

    yeild is a Special type of return type that is used to return in case Generator Functions.
    generatorObject.next() returns next property value of the Generator Object consisting of 
    two Properties
    1. Value - It represents return value.
    2. Done  - It Checks whether there is more code to run, if more code is there to run 
               then it returns false else it returns true. 
    next() -  It is a Function which we use to access next yeild Value. 
              If there is not yeild in the Generator Function and we are calling Generator
              object.next() then it returns value undefined and done false.          
   

12. What is the result of the spread operator array shown below?
->  [...'apple']
    Output: ['a', 'p', 'p', 'l', 'e']   

13. What do you mean by Set and WeakSet in ES6 ?
->                    Set                    |                 WeakSet 
   --------------------------------------------------------------------------------------------
    1.A set can contain all types of values.   1.A weakSet can only contain objects.

    2.Use .size to find the number of          2.Use .length to find the number of elements.
      elements.

    3..forEach() is available for iteration.   3..forEach() is not available for iteration.
                                               
    4.Nothing is auto-destroyed.               4.An element object will be auto released to
                                                 the garbage collector if it has no other 
                                                 reference left.

14. What is the difference between const and Object Freeze ?
->  Const is a property that applies to bindings ("variables"). It creates an immutable binding,
    Which means it prevents Reassignment of the variables but one can modify and add Properties
    of the Variables.
    
    Object.freeze() is a function that works with values, primarily object values. It makes
    an object immutable, meaning that its Properties Values cannot be changed.     

15. What is Symbol Datatype ?
->  It is a New Datatype which is added in Ecamscript6.      
    It is a Primitive Datatype.
    It Cannot be recreated.
    It is a Unique Identifier.

    const s1 = Symbol();       // In the Backend it will create a Unique Identifier like 767hdjbdhb78hj
    console.log(s1)
    OUTPUT -  
    Symbol()

    const s1 = Symbol();
    console.log(s1===s2);
    OUTPUT -
    false

    const s3 = Symbol("Hello");
    const s4 = Symbol("Hello");
    console.log(s3===s4);
    Here Both the Symbol Datatype and Value is same but Refernce Id is Different so that why
    it is returning false.

    A Symbol value can be as an Identifier for Object Properties.

    const person = {
      name:"Sujit",
      age:20,
      city:"Bokaro"

    }
    person.name = "Karan"
    console.log(person);

    Here We Person object name property value will get changed.
    but if we want it to not change then we can use Symbol Datatype.

    const name = Symbol("Person Name");
    const person = {
      name:"Sujit",
      age:20,
      city:"Bokaro"

    }
    person.name = "Karan"
    console.log(person);

    {
      age:20,
      city:"Bokaro"
      name:"Karan",
      Symbol(Person Name):"Sujit"
    }




